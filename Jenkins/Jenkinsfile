/* groovylint-disable BlockEndsWithBlankLine, CompileStatic, DuplicateNumberLiteral, FileEndsWithoutNewline, Indentation, LineLength, NestedBlockDepth, SpaceAfterComma, SpaceAfterOpeningBrace, SpaceBeforeClosingBrace, SpaceBeforeOpeningBrace, TrailingWhitespace, UnnecessaryGString, UnnecessaryGroovyImport */

import java.security.SecureRandom

ALUNOS = ['Adriana','Daniel','Nefi'] // Array para declaração de opções campo entrega

pipeline {
    agent any // Agente -> any|none|label|docker|dockerfile|kubernetes

    environment {
        AMBIENTE = 'CICD' // Ambiente
    }

    triggers {
        cron('00 20 * * 5') // Quando vai executar
    }

    options {
        retry(2) // Tentativas de execução
        timeout(time: 2, unit: 'MINUTES') // timeout
    }

    parameters { // Parametros
        booleanParam(name: 'AVALIACAO', defaultValue: true, description: 'Avaliação finalizada?')
        booleanParam(name: 'ULTIMAAULA', defaultValue: true, description: 'É a última aula?')
        choice(name: 'ENTREGA', choices: ALUNOS, description: 'Quem finalizou o trabalho?')
    }

    stages {
        stage('Entregar trabalho') { 
            steps { 
                script {
                    echo "O aluno ${params.ENTREGA} finalizou a avaliação"
                    //withCredentials([usernamePassword(credentialsId: 'ENTREGAS', usernameVariable: 'MATERIA', passwordVariable: 'TROCAR123')]) {
                    //    echo "O aluno ${params.ENTREGA} finalizou a avaliação da  ${MATERIA}. (${SENHA})"
                    //}
                }
            }
        }

        stage('Avaliacao') { 
            steps { 
                script {
                    if (params.AVALIACAO) {
                        echo "Verificando notas"
                        
                        for (aluno in ALUNOS) {
                            echo "${aluno} entregou a avaliação?"
                        }

                    } else  {
                        echo "reprovado."
                    
                    }
                }
            }
        }

        stage('Corrigir avaliação') {  //executa em diferentes versões, por exemplo, navegadores diferentes
            
            matrix {
                agent any
                axes { 
                    axis {
                        name 'ATIVIDADE'
                        values 'AT1', 'AT2'
                    }
                    axis {
                        name 'MATERIA'
                        values 'CICD', 'PRINCIPIOS DE TESTES'
                    }
                }

                stages { 
                    stage('Corrigir atividade') { 
                        steps { 
                            script { 
                                echo "Corrigindo a ${Atividade} da disciplina ${MATERIA}."
                            }
                        }
                    }
                }
            }
        }

        stage('Atividade entregue') {
            steps { 
                script {
                    parallel(
                        Adriana: {
                            sleep(new Random().nextInt(10))
                            echo "O aluno ${ALUNOS[0]} terminou a atividade em sala"
                        },
                        
                        Daniel: {
                            sleep(new Random().nextInt(10))
                            echo "O aluno ${ALUNOS[1]} não terminou a atividade em tempo hábil"
                        },
                        Nefi: {
                            sleep(new Random().nextInt(10))
                            echo "O aluno ${ALUNOS[2]} não entregou a atividade"
                        }
                    )
                }
            }
        }

        stage('Finalizar materia') {
            input{
                message "Avaliação entregue?"
                ok "Sim!"
                parameters {
                   string(name: 'HORA', description: 'Horário do final da aula')
                }
            }
            
            steps { echo "A avaliação acabou às ${HORA}." }
        }

        stage('Ultima aula?') {
            when { expression { params.ULTIMAAULA } {
                steps {  echo "Acabou a materia."}
        }
    }

    post { 
        success {echo "success"}
        // aborted {echo "aborted"}
        // failure {echo "failure"}
    }
}